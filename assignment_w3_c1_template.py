#!/usr/bin/env python
# coding: utf-8

# Week 3, Assignment C1:
# 
# OLS Linear Regression in Python
# 
# In this notebook, we will perform an OLS linear regression in Python.
# Please complete the lines bellow where you see "# TODO".

# In[4]:


#Objective 1.
#Use this cell to import all three of the Pandas (as pd), Numpy (as np), and Pyplot (from Matplotlib as plt) 
#packages.

import pandas as pd
import numpy as np
from matplotlib import pyplot as plt


# In[ ]:


np.random.seed(0)
x = 3.0 * np.random.randn(100) + 2.0
res = 0.5 * np.random.randn(100)
y = 1.5 + 0.45 * x + res

#Objective 2.
#Create a Pandas DataFrame to store the values of x and y generated by the commands appearing above, and examine
#the first five rows of the DataFrame.
df = pd.DataFrame({'x': #todo, '#todo': y})
df.head()


# In[ ]:


#Objective 3.
#Calculate the means of both x and y, and print them as output.
x_bar = np.mean(#todo)
y_#todo = np.#todo(y)
print(x_bar)
print(y_bar)


# In[ ]:


#Objective 4.
#Add a column called 'x_var' to the DataFrame.  Populate this column with the squares of the deviations of the
#x values from their mean (x_bar).
df['x_var'] = (df['x'] - #todo)**2


# In[ ]:


#Objective 5.
#Add a column called 'xy_cov' to the DataFrame.  Populate this column with the products of the deviations of the
#x values from their mean (x_bar) and the deviations of the y values from their mean (y_bar):
#(x - x_bar)(y - y_bar).
df['xy_cov'] = (df['#todo'] - x_bar) * (df['y'] - #todo)


# In[ ]:


#Objective 6.
#Use the values currently stored in the DataFrame to calculate the OLS Linear Regression coefficients
# We want to take the sum of our collumn 'xy_cov' and divide it by the sum of 'x_var'
#alpha and beta, and print them as output.

beta = df['#todo'].sum() / df['x_var'].#todo()
alpha = y_bar - beta * x_bar
print(alpha)
print(beta)


# In[ ]:


#Objective 7.
#Make a new vector of values called y_pred containing a predicted y value for each actual y value in the DataFrame.
# y_pred = a + BX

y_pred = #todo + #todo * x


# In[ ]:


#Objective 8.
#Plot the predicted values of y (y_pred) against the actual values of y.  Make the actual values of y red in color.

plt.plot(x, y_pred)
plt.scatter(x, y, color='r')
plt.show()


# In[ ]:




